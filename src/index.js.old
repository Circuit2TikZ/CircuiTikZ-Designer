import * as SVG from "@svgdotjs/svg.js/dist/svg.esm";
import "@svgdotjs/svg.panzoom.js";
/// <reference types="@svgdotjs/svg.js" />

import "./impSVGNumber.js";
import { waitForElementLoaded } from "./domWatcher.js";
import svgSnapDragHandler from "./svgSnapDragHandler.js";

import { getNamedTag, getNamedTags } from "./xmlHelper";
import componentSymbol from "./componentSymbol.js";

/**
 * @param {SVGSVGElement} svgElement
 */
function init(svgElement) {
	/** @type {SVG.Container} */
	let canvas = SVG.SVG("#canvas");
	/** @type {SVG.Rect} */
	let paper = SVG.SVG("#grid");
	/** @type {SVG.Rect} */
	let rect1 = SVG.SVG("#rect1");
	/** @type {SVG.Rect} */
	let rect2 = SVG.SVG("#rect2");
	/** @type {SVG.Rect} */
	let rect3 = SVG.SVG("#rect3");
	/** @type {SVG.Rect} */
	let rect4 = SVG.SVG("#rect4");

	/** @type {SVG.Use} */
	let nigfete_001 = SVG.SVG("#nigfete_001");
	/** @type {SVG.Use} */
	let nigfete_002 = SVG.SVG("#nigfete_002");

	canvas.addClass("mainCanvas");
	let windowSize = document.body.getBoundingClientRect();

	canvas.viewbox(0, 0, windowSize.width - 16, windowSize.height - 16); // <-- init viewbox
	canvas.panZoom({
		panning: true,
		pinchZoom: true,
		wheelZoom: true,
		// panButton: 0,
		oneFingerPan: true,
		zoomMin: 0.25,
		zoomMax: 5,
	});

	/**
	 * @typedef {object} PanningEventDetail
	 * @property {SVG.Box} box
	 * @property {MouseEvent} event
	 */

	// Drag picture with mouse
	canvas.on("panning", (/** @type {CustomEvent<PanningEventDetail>} */ evt) =>
		paper.move(evt.detail.box.x, evt.detail.box.y)
	);

	/**
	 * @typedef {object} WheelZoomEventDetail
	 * @property {number} level
	 * @property {SVG.Point} focus
	 */

	/**
	 * @typedef {object} PinchZoomEventDetail
	 * @property {SVG.Box} box
	 * @property {SVG.Point} focus
	 */

	// Mouse wheel OR pinch zoom
	canvas.on("zoom", (/** @type {CustomEvent<WheelZoomEventDetail|PinchZoomEventDetail>} */ evt) => {
		if (evt.box) paper.move(evt.detail.box.x, evt.detail.box.y);
	});

	canvas.on(
		"wheel.panZoom",
		/**
		 * Listens for same event as svg.panzoom.js, but is added thereafter. Thus this gets called after panzoom is
		 * done moving the picture.
		 *
		 * @this {SVG.Svg} canvas
		 * @param {WheelEvent} evt
		 */
		function (evt) {
			/** @type {SVG.Box} */
			const viewbox = this.viewbox();
			paper.move(viewbox.x, viewbox.y);
		},
		canvas,
		{ passive: false }
	);

	// canvas.on("pinchZoomStart", (/** @type {CustomEvent} */ evt) => {
	// 	//evt.preventDefault();
	// 	console.log(evt);
	// });

	[rect1, rect2, rect3, rect4, nigfete_001, nigfete_002].forEach((element) =>
		svgSnapDragHandler.snapDrag(element, true)
	);

	/** @type {SVG.Container} */
	let defs = canvas.defs();
	let componentSymbols = getNamedTags(defs.node, "symbol").map((symbolElement) => new componentSymbol(symbolElement));
	console.log(componentSymbols);
}

waitForElementLoaded("canvasObj")
	.then(
		/**
		 * @param {HTMLObjectElement} canvasObj
		 */
		(canvasObj) => {
			/** @type {SVGSVGElement|undefined} */
			let svgElement = canvasObj?.getSVGDocument?.()?.children?.[0];
			if (!canvasObj || !svgElement) {
				console.error(
					"Can not access SVG element!",
					canvasObj,
					canvasObj?.getSVGDocument() || null,
					canvasObj?.getSVGDocument()?.children || null,
					canvasObj?.getSVGDocument()?.children?.[0] || null
				);
			} else {
				/** @type {SVGSVGElement} */
				let newSVG = document.createElementNS("http://www.w3.org/2000/svg", "svg");
				for (const attr of svgElement.attributes) {
					if (!newSVG.hasAttribute(attr.name)) newSVG.setAttribute(attr.name, attr.value);
				}
				newSVG.innerHTML = svgElement.innerHTML;
				canvasObj.replaceWith(newSVG);
				return svgElement;
			}
		}
	)
	.then(init);
